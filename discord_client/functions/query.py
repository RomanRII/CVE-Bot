import json
from cve import create_connection
from discord_client.messages import errors
from discord_client.functions.data_validation.cve import is_valid_cve

def query_cve(cve_id):
    if not is_valid_cve(cve_id):
        return errors.invalid_cve_id

    connection = create_connection()
    cursor = connection.cursor()

    query = "SELECT * FROM CVEs WHERE cve_id = ?"
    cursor.execute(query, (cve_id,))

    result = cursor.fetchone()
    connection.close()

    if result:
        # Extract the values from the result
        cve_id_value = result[1]
        cwe_value = result[2] if result[2] else 'N/A'
        cvss_v2_value = result[3] if result[3] else 'N/A'
        cvss_v3_value = result[4] if result[4] else 'N/A'
        summary_value = result[5].strip()
        
        # Parse and format vendors
        vendors_data = json.loads(result[6])
        vendors_formatted = ''
        for vendor, items in vendors_data.items():
            vendor_name = vendor.capitalize()
            items_formatted = ', '.join(item for item in items)
            vendors_formatted += f'```{vendor_name}:\n{items_formatted}\n```'

        formatted_result = (
            f"CVE ID: `{cve_id_value}`\n"
            f"CWE: `{cwe_value}`\n"
            f"CVSS V2: `{cvss_v2_value}`\n"
            f"CVSS V3: `{cvss_v3_value}`\n"
            f"Summary: ```{summary_value}```\n"
            f"Vendors:\n{vendors_formatted}"
        )
        return formatted_result
    else:
        return errors.no_matching_cve
    
def query_all():
    connection = create_connection()
    cursor = connection.cursor()

    query = "SELECT cve_id FROM CVEs"
    cursor.execute(query)

    result = cursor.fetchall()
    connection.close()

    if result:
        # Extract CVE IDs from the result
        cve_ids = [row[0] for row in result]

        # Sort the CVE IDs based on the numerical part after the year
        cve_ids.sort(key=lambda x: int(x.split('-')[2]))

        # Format the sorted CVE IDs
        formatted_result = '\n'.join(cve_ids)
        return f'```\n{formatted_result}\n```'
    else:
        return errors.no_cves

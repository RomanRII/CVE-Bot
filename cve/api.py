import json
import time
import random
import requests
import concurrent.futures
from datetime import datetime
from cve import create_connection
from cve.config import config, target_rules

def query_cves(url):
    credentials = (config.CVE_USERNAME, config.CVE_PASSWORD)
    response = requests.get(url=url, auth=credentials)
    if response.status_code == 200:
        return response.json()
    else:
        print("Failed to fetch data from API")
        return False

def get_cve_data(cve_id, cwe=None):
    connection = create_connection()
    cursor = connection.cursor()
    
    new_url = f"{config.CVES_URL}/cve/{cve_id}" 
    data = query_cves(url=new_url)

    if data:
        summary = data.get('summary')
        cvss_v2 = data.get('cvss', {}).get('v2')
        cvss_v3 = data.get('cvss', {}).get('v3')
        vendors = json.dumps(data.get('vendors', {}))  # Convert dictionary to string

        cvss_v2_score = float(cvss_v2) if cvss_v2 is not None else 0
        cvss_v3_score = float(cvss_v3) if cvss_v3 is not None else 0

        current_year = datetime.now().year
        cve_year = int(cve_id.split('-')[1])

        if (cvss_v2_score > 7.0 or cvss_v3_score > 7.0) and (cve_year == current_year):
            print(f"[CVE API] Inserting {cve_id}")
            cursor.execute('''INSERT INTO CVEs (cve_id, summary, cvss_v2, cvss_v3, vendors, cwe) VALUES (?, ?, ?, ?, ?, ?)''', (cve_id, summary, cvss_v2, cvss_v3, vendors, cwe))
            connection.commit()

    connection.close()

def process_cve_data(cursor, cve_id, cwe=None):
    # Check if the CVE ID already exists in the database
    cursor.execute("SELECT COUNT(*) FROM CVEs WHERE cve_id = ?", (cve_id,))
    if cursor.fetchone()[0] == 0:
        get_cve_data(cve_id, cwe)

def add_cves():
    connection = create_connection()
    cursor = connection.cursor()

    with concurrent.futures.ThreadPoolExecutor(max_workers=5) as executor:
        # Prepare futures for CWE-based CVE queries
        cwe_futures = {executor.submit(query_cves, f"{config.CVES_URL}/cwe/{cwe_id}/cve"): cwe_id for cwe_id in target_rules.cwes}

        # Process CWE-based CVE queries
        for future in concurrent.futures.as_completed(cwe_futures):
            cwe_id = cwe_futures[future]
            cve_data = future.result()

            if not cve_data:
                print(f"[!] Error getting CVEs for CWE ID {cwe_id}. Check your credentials or API availability")
                continue

            for cve in cve_data:
                cve_id = cve.get("id")
                process_cve_data(cursor, cve_id, cwe_id)

        # Query for CVEs based on keywords
        keywords_future = executor.submit(query_cves, f"{config.CVES_URL}/cve")
        cve_data = keywords_future.result()

        if cve_data:
            for cve in cve_data:
                cve_id = cve.get("id")
                summary = cve.get("summary", "").lower()
                if any(keyword.lower() in summary for keyword in target_rules.keywords):
                    process_cve_data(cursor, cve_id)

    connection.commit()
    connection.close()